{"ast":null,"code":"var _jsxFileName = \"/home/duc/coding/duc-nguyen-speech-to-text/client/src/db/firebase.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\n// Import the functions you need from the SDKs you need\nimport React, { useState, useEffect, useContext, createContext } from \"react\";\nimport firebase from \"firebase/compat/app\"; // import { initializeApp } from \"firebase/app\";\n\nimport { getAnalytics } from \"firebase/analytics\";\nimport \"firebase/compat/auth\";\nimport { getAuth } from \"firebase/auth\"; // TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD4xfqZAmS2dGvzDIdo7tlRMKdjNbxDKvI\",\n  authDomain: \"speech-to-text-a1b66.firebaseapp.com\",\n  projectId: \"speech-to-text-a1b66\",\n  storageBucket: \"speech-to-text-a1b66.appspot.com\",\n  messagingSenderId: \"58641760606\",\n  appId: \"1:58641760606:web:d5f0e5ba533593a9bc8fcf\",\n  measurementId: \"G-EFKF3THGQQ\"\n}; // Initialize Firebase\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nfirebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL);\nconst analytics = getAnalytics(firebaseApp); // //sign-in with google\n// export const auth = firebase.auth();\n// const provider = new firebase.auth.GoogleAuthProvider();\n// provider.setCustomParameters({ prompt: 'select_account' });\n// export const signInWithGoogle = () => auth.signInWithPopup(provider);\n\n/**\n * https://stackoverflow.com/questions/66273155/how-to-keep-authenticated-state-on-refresh\n */\n\nexport default firebaseApp;\nconst authContext = /*#__PURE__*/createContext(); // Provider component that wraps your app and makes auth object ...\n// ... available to any child component that calls useAuth().\n\nexport function ProvideAuth(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const auth = useProvideAuth();\n  return /*#__PURE__*/_jsxDEV(authContext.Provider, {\n    value: auth,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 10\n  }, this);\n} // Hook for child components to get the auth object ...\n// ... and re-render when it changes.\n\n_s(ProvideAuth, \"XNU4Jn8u4aVzJknlKOHFJq03xMo=\", false, function () {\n  return [useProvideAuth];\n});\n\n_c = ProvideAuth;\nexport const useAuth = () => {\n  _s2();\n\n  return useContext(authContext);\n}; // Provider hook that creates auth object and handles state\n\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nfunction useProvideAuth() {\n  _s3();\n\n  const [loading, setLoading] = useState(firebase.auth().currentUser);\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    console.log({\n      loading\n    });\n  }, [loading]); // Wrap any Firebase methods we want to use making sure ...\n  // ... to save the user to state.\n\n  const signin = async () => {\n    setLoading(true);\n    const provider = new firebase.auth.GoogleAuthProvider();\n    provider.setCustomParameters({\n      prompt: \"select_account\"\n    });\n\n    try {\n      const response = await firebase.auth().signInWithPopup(provider);\n      setUser(response.user);\n      return response.user;\n    } finally {\n      return setLoading(false);\n    }\n  };\n\n  const signout = async () => {\n    setLoading(true);\n\n    try {\n      await firebase.auth().signOut();\n      setUser(false);\n    } finally {\n      return setLoading(false);\n    }\n  }; // Subscribe to user on mount\n  // Because this sets state in the callback it will cause any ...\n  // ... component that utilizes this hook to re-render with the ...\n  // ... latest auth object.\n\n\n  useEffect(() => {\n    const unsubscribe = firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        setUser(user);\n      } else {\n        setUser(false);\n      }\n\n      setLoading(false);\n    }); // Cleanup subscription on unmount\n\n    return () => unsubscribe();\n  }, []); // Return the user object and auth methods\n\n  return {\n    loading,\n    user,\n    signin,\n    signout\n  };\n}\n\n_s3(useProvideAuth, \"0cNg6KlsBwulK0KJXn4xEkcphYE=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ProvideAuth\");","map":{"version":3,"sources":["/home/duc/coding/duc-nguyen-speech-to-text/client/src/db/firebase.js"],"names":["React","useState","useEffect","useContext","createContext","firebase","getAnalytics","getAuth","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseApp","initializeApp","auth","setPersistence","Auth","Persistence","LOCAL","analytics","authContext","ProvideAuth","children","useProvideAuth","useAuth","loading","setLoading","currentUser","user","setUser","console","log","signin","provider","GoogleAuthProvider","setCustomParameters","prompt","response","signInWithPopup","signout","signOut","unsubscribe","onAuthStateChanged"],"mappings":"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","sourcesContent":["// Import the functions you need from the SDKs you need\nimport React, { useState, useEffect, useContext, createContext } from \"react\";\nimport firebase from \"firebase/compat/app\";\n// import { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport \"firebase/compat/auth\";\nimport {getAuth} from\"firebase/auth\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD4xfqZAmS2dGvzDIdo7tlRMKdjNbxDKvI\",\n  authDomain: \"speech-to-text-a1b66.firebaseapp.com\",\n  projectId: \"speech-to-text-a1b66\",\n  storageBucket: \"speech-to-text-a1b66.appspot.com\",\n  messagingSenderId: \"58641760606\",\n  appId: \"1:58641760606:web:d5f0e5ba533593a9bc8fcf\",\n  measurementId: \"G-EFKF3THGQQ\",\n};\n\n// Initialize Firebase\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nfirebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL);\nconst analytics = getAnalytics(firebaseApp);\n\n// //sign-in with google\n// export const auth = firebase.auth();\n\n// const provider = new firebase.auth.GoogleAuthProvider();\n// provider.setCustomParameters({ prompt: 'select_account' });\n\n// export const signInWithGoogle = () => auth.signInWithPopup(provider);\n/**\n * https://stackoverflow.com/questions/66273155/how-to-keep-authenticated-state-on-refresh\n */\n export default firebaseApp;\nconst authContext = createContext();\n\n// Provider component that wraps your app and makes auth object ...\n// ... available to any child component that calls useAuth().\nexport function ProvideAuth({ children }) {\n  const auth = useProvideAuth();\n  return <authContext.Provider value={auth}>{children}</authContext.Provider>;\n}\n\n// Hook for child components to get the auth object ...\n// ... and re-render when it changes.\nexport const useAuth = () => {\n  return useContext(authContext);\n};\n\n// Provider hook that creates auth object and handles state\nfunction useProvideAuth() {\n  const [loading, setLoading] = useState(firebase.auth().currentUser);\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    console.log({ loading });\n  }, [loading]);\n\n  // Wrap any Firebase methods we want to use making sure ...\n  // ... to save the user to state.\n  const signin = async () => {\n    setLoading(true);\n    const provider = new firebase.auth.GoogleAuthProvider();\n    provider.setCustomParameters({ prompt: \"select_account\" });\n    try {\n      const response = await firebase.auth().signInWithPopup(provider);\n      setUser(response.user);\n      return response.user;\n    } finally {\n      return setLoading(false);\n    }\n  };\n\n  const signout = async () => {\n    setLoading(true);\n    try {\n      await firebase.auth().signOut();\n      setUser(false);\n    } finally {\n      return setLoading(false);\n    }\n  };\n\n  // Subscribe to user on mount\n  // Because this sets state in the callback it will cause any ...\n  // ... component that utilizes this hook to re-render with the ...\n  // ... latest auth object.\n  useEffect(() => {\n    const unsubscribe = firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        setUser(user);\n      } else {\n        setUser(false);\n      }\n      setLoading(false);\n    });\n\n    // Cleanup subscription on unmount\n    return () => unsubscribe();\n  }, []);\n\n  // Return the user object and auth methods\n  return {\n    loading,\n    user,\n    signin,\n    signout,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}